# tests.py - Tests completos para el m√≥dulo de Medios de Pago
from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth import get_user_model
from django.contrib.auth.models import Permission
from django.utils import timezone
from django.core.exceptions import ValidationError
from django.db import IntegrityError
from decimal import Decimal
import json
from datetime import datetime

from .models import MedioDePago, CampoMedioDePago
from .forms import MedioDePagoForm, CampoMedioDePagoForm, create_campo_formset

User = get_user_model()


class MedioDePagoModelTest(TestCase):
    """Tests para el modelo MedioDePago"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
    def test_crear_medio_pago_basico(self):
        """Test: Crear un medio de pago con datos b√°sicos"""
        print("\n‚úÖ Probando creaci√≥n de medio de pago b√°sico...")
        
        medio = MedioDePago.objects.create(
            nombre="PayPal",
            comision_porcentaje=3.5,
            is_active=True
        )
        
        self.assertEqual(medio.nombre, "PayPal")
        self.assertEqual(medio.comision_porcentaje, Decimal('3.5'))
        self.assertTrue(medio.is_active)
        self.assertIsNone(medio.deleted_at)
        
        print(f"   ‚úì Medio creado: {medio}")
        print(f"   ‚úì Comisi√≥n: {medio.comision_porcentaje}%")
        print(f"   ‚úì Estado: {'Activo' if medio.is_active else 'Inactivo'}")
        
    def test_validacion_comision_negativa(self):
        """Test: Validar que no se permitan comisiones negativas"""
        print("\n‚ö†Ô∏è Probando validaci√≥n de comisi√≥n negativa...")
        
        with self.assertRaises(ValidationError) as context:
            medio = MedioDePago(
                nombre="Tarjeta Visa",
                comision_porcentaje=-5,
                is_active=True
            )
            medio.full_clean()
        
        print(f"   ‚úì Error capturado: {context.exception}")
        print("   ‚úì Validaci√≥n funcionando correctamente")
        
    def test_validacion_comision_mayor_100(self):
        """Test: Validar que no se permitan comisiones mayores a 100%"""
        print("\n‚ö†Ô∏è Probando validaci√≥n de comisi√≥n mayor a 100%...")
        
        with self.assertRaises(ValidationError) as context:
            medio = MedioDePago(
                nombre="Banco Local",
                comision_porcentaje=150,
                is_active=True
            )
            medio.full_clean()
        
        print(f"   ‚úì Error capturado: {context.exception}")
        print("   ‚úì Comisi√≥n m√°xima validada correctamente")
        
    def test_nombre_vacio_no_permitido(self):
        """Test: Validar que el nombre no puede estar vac√≠o"""
        print("\n‚ö†Ô∏è Probando validaci√≥n de nombre vac√≠o...")
        
        with self.assertRaises(ValidationError):
            medio = MedioDePago(
                nombre="   ",  # Solo espacios
                comision_porcentaje=2.5
            )
            medio.save()
        
        print("   ‚úì Nombre vac√≠o rechazado correctamente")
        
    def test_soft_delete_funcionalidad(self):
        """Test: Probar la funcionalidad de soft delete"""
        print("\nüóëÔ∏è Probando soft delete...")
        
        medio = MedioDePago.objects.create(
            nombre="Mercado Pago",
            comision_porcentaje=4.5,
            is_active=True
        )
        
        print(f"   Estado inicial: Activo={medio.is_active}, Eliminado={medio.is_deleted}")
        
        # Aplicar soft delete
        medio.soft_delete()
        
        print(f"   Estado despu√©s de soft delete: Activo={medio.is_active}, Eliminado={medio.is_deleted}")
        
        self.assertIsNotNone(medio.deleted_at)
        self.assertFalse(medio.is_active)
        self.assertTrue(medio.is_deleted)
        
        # Verificar que a√∫n existe en la BD
        self.assertTrue(MedioDePago.objects.filter(pk=medio.pk).exists())
        
        # Verificar que no aparece en el manager 'active'
        self.assertFalse(MedioDePago.active.filter(pk=medio.pk).exists())
        
        print("   ‚úì Soft delete aplicado correctamente")
        print("   ‚úì Registro a√∫n existe en BD pero marcado como eliminado")
        
    def test_restore_medio_eliminado(self):
        """Test: Restaurar un medio de pago eliminado"""
        print("\n‚ôªÔ∏è Probando restauraci√≥n de medio eliminado...")
        
        medio = MedioDePago.objects.create(
            nombre="Bitcoin Wallet",
            comision_porcentaje=1.5
        )
        
        medio.soft_delete()
        print(f"   Estado despu√©s de eliminar: Eliminado={medio.is_deleted}")
        
        medio.restore()
        print(f"   Estado despu√©s de restaurar: Eliminado={medio.is_deleted}")
        
        self.assertIsNone(medio.deleted_at)
        self.assertFalse(medio.is_deleted)
        
        print("   ‚úì Medio restaurado exitosamente")


class CampoMedioDePagoModelTest(TestCase):
    """Tests para el modelo CampoMedioDePago"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
        self.medio = MedioDePago.objects.create(
            nombre="PayPal Test",
            comision_porcentaje=3.0,
            is_active=True
        )
        
    def test_crear_campo_basico(self):
        """Test: Crear un campo b√°sico para un medio de pago"""
        print("\nüìù Probando creaci√≥n de campo b√°sico...")
        
        campo = CampoMedioDePago.objects.create(
            medio_de_pago=self.medio,
            nombre_campo="Email",
            tipo_dato="EMAIL",
            is_required=True
        )
        
        self.assertEqual(campo.nombre_campo, "Email")
        self.assertEqual(campo.tipo_dato, "EMAIL")
        self.assertTrue(campo.is_required)
        
        print(f"   ‚úì Campo creado: {campo}")
        print(f"   ‚úì Tipo: {campo.get_tipo_dato_display()}")
        print(f"   ‚úì Requerido: {'S√≠' if campo.is_required else 'No'}")
        
    def test_validacion_nombre_campo_duplicado(self):
        """Test: Validar que no se permitan campos duplicados en el mismo medio"""
        print("\n‚ö†Ô∏è Probando validaci√≥n de campos duplicados...")
        
        # Crear primer campo
        CampoMedioDePago.objects.create(
            medio_de_pago=self.medio,
            nombre_campo="N√∫mero de cuenta",
            tipo_dato="TEXTO"
        )
        
        # Intentar crear campo duplicado
        with self.assertRaises(ValidationError) as context:
            campo_duplicado = CampoMedioDePago(
                medio_de_pago=self.medio,
                nombre_campo="N√∫mero de cuenta",  # Mismo nombre
                tipo_dato="NUMERO"
            )
            campo_duplicado.full_clean()
        
        print(f"   ‚úì Error capturado: {context.exception}")
        print("   ‚úì Duplicados prevenidos correctamente")
        
    def test_soft_delete_campo(self):
        """Test: Probar soft delete de campos"""
        print("\nüóëÔ∏è Probando soft delete de campo...")
        
        campo = CampoMedioDePago.objects.create(
            medio_de_pago=self.medio,
            nombre_campo="CVV",
            tipo_dato="NUMERO",
            is_required=True
        )
        
        print(f"   Estado inicial: Eliminado={campo.is_deleted}")
        
        campo.soft_delete()
        
        print(f"   Estado despu√©s de soft delete: Eliminado={campo.is_deleted}")
        
        self.assertIsNotNone(campo.deleted_at)
        self.assertTrue(campo.is_deleted)
        
        # Verificar que no aparece en campos activos
        self.assertEqual(self.medio.campos.filter(deleted_at__isnull=True).count(), 0)
        
        print("   ‚úì Campo marcado como eliminado")
        print("   ‚úì No aparece en campos activos del medio")
        
    def test_campo_duplicado_despues_soft_delete(self):
        """Test: Permitir crear campo con mismo nombre despu√©s de soft delete"""
        print("\n‚ôªÔ∏è Probando creaci√≥n de campo con nombre de campo eliminado...")
        
        # Crear y eliminar campo
        campo1 = CampoMedioDePago.objects.create(
            medio_de_pago=self.medio,
            nombre_campo="Token",
            tipo_dato="TEXTO"
        )
        campo1.soft_delete()
        
        print(f"   Campo original eliminado: {campo1.nombre_campo}")
        
        # Crear nuevo campo con el mismo nombre (deber√≠a permitirse)
        campo2 = CampoMedioDePago.objects.create(
            medio_de_pago=self.medio,
            nombre_campo="Token",
            tipo_dato="TEXTO"
        )
        
        self.assertEqual(campo2.nombre_campo, "Token")
        self.assertFalse(campo2.is_deleted)
        
        print(f"   ‚úì Nuevo campo creado con el mismo nombre: {campo2.nombre_campo}")
        print("   ‚úì Sistema permite reutilizar nombres de campos eliminados")


class MedioDePagoFormsTest(TestCase):
    """Tests para los formularios del m√≥dulo"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
    def test_medio_pago_form_valido(self):
        """Test: Formulario de medio de pago con datos v√°lidos"""
        print("\n‚úÖ Probando formulario con datos v√°lidos...")
        
        form_data = {
            'nombre': 'Stripe',
            'comision_porcentaje': '2.9',
            'is_active': True
        }
        
        form = MedioDePagoForm(data=form_data)
        
        self.assertTrue(form.is_valid())
        print(f"   ‚úì Formulario v√°lido")
        print(f"   ‚úì Datos: {form_data}")
        
    def test_medio_pago_form_comision_invalida(self):
        """Test: Formulario con comisi√≥n inv√°lida"""
        print("\n‚ö†Ô∏è Probando formulario con comisi√≥n inv√°lida...")
        
        form_data = {
            'nombre': 'Banco Test',
            'comision_porcentaje': '120',  # Mayor a 100
            'is_active': True
        }
        
        form = MedioDePagoForm(data=form_data)
        
        self.assertFalse(form.is_valid())
        self.assertIn('comision_porcentaje', form.errors)
        
        print(f"   ‚úì Formulario rechazado correctamente")
        print(f"   ‚úì Error: {form.errors['comision_porcentaje']}")
        
    def test_campo_form_valido(self):
        """Test: Formulario de campo con datos v√°lidos"""
        print("\n‚úÖ Probando formulario de campo v√°lido...")
        
        medio = MedioDePago.objects.create(
            nombre="Test Medio",
            comision_porcentaje=2.0
        )
        
        form_data = {
            'nombre_campo': 'N√∫mero de tarjeta',
            'tipo_dato': 'NUMERO',
            'is_required': True
        }
        
        form = CampoMedioDePagoForm(data=form_data)
        form.instance.medio_de_pago = medio
        
        self.assertTrue(form.is_valid())
        print(f"   ‚úì Formulario de campo v√°lido")
        print(f"   ‚úì Campo: {form_data['nombre_campo']}")
        
    def test_formset_creacion_vs_edicion(self):
        """Test: Verificar diferencias entre formset de creaci√≥n y edici√≥n"""
        print("\nüîÑ Probando formsets de creaci√≥n vs edici√≥n...")
        
        # Formset de creaci√≥n
        FormSetCreacion = create_campo_formset(is_edit=False)
        formset_creacion = FormSetCreacion()
        
        print(f"   Formset de creaci√≥n:")
        print(f"   ‚úì Formularios extra: {formset_creacion.extra}")
        self.assertEqual(formset_creacion.extra, 1)
        
        # Formset de edici√≥n
        FormSetEdicion = create_campo_formset(is_edit=True)
        formset_edicion = FormSetEdicion()
        
        print(f"   Formset de edici√≥n:")
        print(f"   ‚úì Formularios extra: {formset_edicion.extra}")
        self.assertEqual(formset_edicion.extra, 0)
        
        print("   ‚úì Configuraci√≥n diferenciada correcta")


class MedioDePagoViewsTest(TestCase):
    """Tests para las vistas del m√≥dulo"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
        # Crear superusuario de prueba y forzar autenticaci√≥n
        self.user = User.objects.create_superuser(
            username='admin',
            password='admin123',
            email='admin@test.com',
            is_staff=True,
            is_active=True
        )
        # Forzar autenticaci√≥n sin usar login
        self.client = Client()
        self.client.force_login(self.user)
        
        # Permisos espec√≠ficos para medios de pago
        perms = [
            'view_mediodepago',
            'add_mediodepago',
            'change_mediodepago',
            'delete_mediodepago',
            'view_campomediodepago',
            'add_campomediodepago',
            'change_campomediodepago',
            'delete_campomediodepago'
        ]
        
        # Asegurar que el usuario tiene todos los permisos necesarios
        for perm_code in perms:
            try:
                perm = Permission.objects.get(codename=perm_code)
                self.user.user_permissions.add(perm)
            except Permission.DoesNotExist:
                print(f"‚ö†Ô∏è Advertencia: Permiso {perm_code} no encontrado")
        
        # Configurar cliente y forzar login
        self.client = Client()
        success = self.client.login(username='testuser', password='testpass123')
        
        if not success:
            print("‚ùå Error: No se pudo autenticar el usuario de prueba")
            print("üí° Sugerencia: Verificar credenciales y estado del usuario")
        
        print(f"   Usuario de prueba creado: {self.user.username}")
        print(f"   Permisos asignados: {[p.codename for p in self.user.user_permissions.all()]}")
        print(f"   Estado login: {'‚úÖ Exitoso' if success else '‚ùå Fallido'}")
        
    def test_lista_medios_pago(self):
        """Test: Vista de lista de medios de pago"""
        print("\nüìã Probando vista de lista...")
        
        # Crear algunos medios de prueba con Decimal
        from decimal import Decimal
        MedioDePago.objects.create(nombre="PayPal", comision_porcentaje=Decimal('3.500'))
        MedioDePago.objects.create(nombre="Stripe", comision_porcentaje=Decimal('2.900'))
        
        # Crear uno eliminado (no debe aparecer)
        medio_eliminado = MedioDePago.objects.create(
            nombre="Eliminado",
            comision_porcentaje=5.0
        )
        medio_eliminado.soft_delete()
        
        response = self.client.get(reverse('medios_pago:lista'))
        
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "PayPal")
        self.assertContains(response, "Stripe")
        self.assertNotContains(response, "Eliminado")
        
        print(f"   ‚úì Status: {response.status_code}")
        print(f"   ‚úì Medios activos mostrados: 2")
        print(f"   ‚úì Medios eliminados ocultados: 1")
        
    def test_crear_medio_pago_completo(self):
        """Test: Crear medio de pago con campos din√°micos"""
        print("\n‚ûï Probando creaci√≥n de medio con campos...")
        print("   ‚Ä¢ Fase 1: Verificando acceso al formulario...")
        
        try:
            url = reverse('medios_pago:crear_admin')
            print(f"   ‚Ä¢ URL del formulario: {url}")
            
            response = self.client.get(url)
            print(f"   ‚Ä¢ Status code: {response.status_code}")
            
            if response.status_code == 404:
                print("   ‚ùå Error: URL no encontrada")
                print("   üí° Sugerencia: Verificar en urls.py:")
                print("     - Que existe la URL 'crear_admin'")
                print("     - Que la vista est√° correctamente importada")
            elif response.status_code == 302:
                print(f"   ‚ö†Ô∏è Redirecci√≥n detectada -> {response.url}")
                print("   üí° Sugerencia: Verificar permisos del usuario")
        except Exception as e:
            print(f"   ‚ùå Error al acceder: {str(e)}")
            print("   üí° Sugerencia: Verificar configuraci√≥n de URLs")
        
        print("\n   ‚Ä¢ Fase 2: Preparando datos de creaci√≥n...")
        data = {
            'nombre': 'MercadoPago',
            'comision_porcentaje': '4.5',
            'is_active': 'on',
            # Formset management
            'campos-TOTAL_FORMS': '2',
            'campos-INITIAL_FORMS': '0',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
            # Campo 1
            'campos-0-nombre_campo': 'Email',
            'campos-0-tipo_dato': 'EMAIL',
            'campos-0-is_required': 'on',
            'campos-0-DELETE': '',
            # Campo 2
            'campos-1-nombre_campo': 'Token API',
            'campos-1-tipo_dato': 'TEXTO',
            'campos-1-is_required': 'on',
            'campos-1-DELETE': '',
        }

        print("   ‚Ä¢ Datos del medio de pago:")
        print(f"     - Nombre: {data['nombre']}")
        print(f"     - Comisi√≥n: {data['comision_porcentaje']}%")
        print(f"     - Activo: {data['is_active']}")
        
        print("   ‚Ä¢ Campos din√°micos:")
        print(f"     1. {data['campos-0-nombre_campo']} ({data['campos-0-tipo_dato']})")
        print(f"     2. {data['campos-1-nombre_campo']} ({data['campos-1-tipo_dato']})")

        print("\n   ‚Ä¢ Fase 3: Enviando datos al servidor...")
        response = self.client.post(url, data, follow=True)
        
        if response.status_code != 200:
            print(f"   ‚ùå Error: Status code {response.status_code}")
            if response.context and 'form' in response.context:
                print("   ‚Ä¢ Errores en el formulario:")
                for field, errors in response.context['form'].errors.items():
                    print(f"     - {field}: {', '.join(errors)}")
        else:
            print("   ‚úÖ Datos enviados exitosamente")

        print("\n   ‚Ä¢ Fase 4: Verificando creaci√≥n en base de datos...")
        medio = MedioDePago.objects.filter(nombre='MercadoPago').first()
        
        if medio is None:
            print("   ‚ùå Error: Medio de pago no creado")
            return
            
        campos = medio.campos.filter(deleted_at__isnull=True)
        
        self.assertIsNotNone(medio)
        self.assertEqual(campos.count(), 2)
        
        print("\n   ‚Ä¢ Resumen de la creaci√≥n:")
        print(f"   ‚úÖ Medio de pago creado:")
        print(f"     - ID: {medio.id}")
        print(f"     - Nombre: {medio.nombre}")
        print(f"     - Comisi√≥n: {medio.comision_porcentaje}%")
        print(f"     - Estado: {'Activo' if medio.is_active else 'Inactivo'}")
        
        print(f"\n   ‚úÖ Campos configurados ({campos.count()}):")
        for campo in campos:
            print(f"     - {campo.nombre_campo}:")
            print(f"       ‚Ä¢ Tipo: {campo.get_tipo_dato_display()}")
            print(f"       ‚Ä¢ Requerido: {'S√≠' if campo.is_required else 'No'}")
            print(f"       ‚Ä¢ ID: {campo.id}")
        
        print("\n   ‚úÖ Test completado exitosamente")
        
    def test_editar_medio_agregar_campo(self):
        """Test: Editar medio y agregar nuevo campo (sin eliminar existentes)"""
        print("\n‚úèÔ∏è Probando edici√≥n con adici√≥n de campo...")
        print("   ‚Ä¢ Paso 1: Crear medio de pago inicial...")
        
        # Crear medio con campo inicial
        medio = MedioDePago.objects.create(
            nombre="WebPay",
            comision_porcentaje=3.0,
            is_active=True
        )
        
        campo_inicial = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="C√≥digo comercio",
            tipo_dato="TEXTO",
            is_required=True
        )
        
        print(f"   Estado inicial: 1 campo ({campo_inicial.nombre_campo})")
        
        url = reverse('medios_pago:editar', args=[medio.pk])
        
        # Datos para agregar un nuevo campo
        data = {
            'nombre': 'WebPay',
            'comision_porcentaje': '3.5',  # Cambiar comisi√≥n
            'is_active': 'on',
            # Formset management
            'campos-TOTAL_FORMS': '2',
            'campos-INITIAL_FORMS': '1',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
            # Campo existente
            'campos-0-id': str(campo_inicial.id),
            'campos-0-nombre_campo': 'C√≥digo comercio',
            'campos-0-tipo_dato': 'TEXTO',
            'campos-0-is_required': 'on',
            'campos-0-DELETE': '',
            # Campo nuevo
            'campos-1-nombre_campo': 'Llave privada',
            'campos-1-tipo_dato': 'TEXTO',
            'campos-1-is_required': 'on',
            'campos-1-DELETE': '',
        }
        
        response = self.client.post(url, data, follow=True)
        
        self.assertEqual(response.status_code, 200)
        
        # Verificar cambios
        medio.refresh_from_db()
        self.assertEqual(medio.comision_porcentaje, Decimal('3.5'))
        
        campos = medio.campos.filter(deleted_at__isnull=True)
        self.assertEqual(campos.count(), 2)
        
        print(f"   ‚úì Comisi√≥n actualizada: {medio.comision_porcentaje}%")
        print(f"   ‚úì Campos totales: {campos.count()}")
        for campo in campos:
            print(f"     - {campo.nombre_campo}")
        
    def test_toggle_activo_medio(self):
        """Test: Activar/Desactivar medio de pago"""
        print("\nüîÑ Probando toggle de estado activo...")
        print("   ‚Ä¢ Paso 1: Crear medio inicialmente inactivo...")
        
        medio = MedioDePago.objects.create(
            nombre="Bitcoin",
            comision_porcentaje=1.0,
            is_active=False
        )
        
        print(f"   Estado inicial: {'Activo' if medio.is_active else 'Inactivo'}")
        
        url = reverse('medios_pago:toggle', args=[medio.pk])
        response = self.client.post(url, follow=True)
        
        medio.refresh_from_db()
        self.assertTrue(medio.is_active)
        
        print(f"   Estado despu√©s de toggle: {'Activo' if medio.is_active else 'Inactivo'}")
        
        # Toggle nuevamente
        response = self.client.post(url, follow=True)
        medio.refresh_from_db()
        self.assertFalse(medio.is_active)
        
        print(f"   Estado despu√©s de segundo toggle: {'Activo' if medio.is_active else 'Inactivo'}")
        print("   ‚úì Toggle funcionando correctamente")
        
    def test_papelera_medios_eliminados(self):
        """Test: Vista de papelera con medios eliminados"""
        print("\nüóëÔ∏è Probando vista de papelera...")
        print("   ‚Ä¢ Verificando permisos y acceso...")
        
        url = reverse('medios_pago:papelera')
        print(f"   ‚Ä¢ Intentando acceder a: {url}")
        
        response = self.client.get(url)
        if response.status_code == 302:
            print(f"   ‚ö†Ô∏è Redirecci√≥n detectada -> {response.url}")
            print("   üí° Sugerencia: Verificar que el usuario tiene permiso 'view_mediodepago'")
        
        # Crear medios activos y eliminados
        medio_activo = MedioDePago.objects.create(
            nombre="Activo",
            comision_porcentaje=2.0
        )
        
        medio_eliminado1 = MedioDePago.objects.create(
            nombre="Eliminado 1",
            comision_porcentaje=3.0
        )
        medio_eliminado1.soft_delete()
        
        medio_eliminado2 = MedioDePago.objects.create(
            nombre="Eliminado 2",
            comision_porcentaje=4.0
        )
        medio_eliminado2.soft_delete()
        
        url = reverse('medios_pago:papelera')
        response = self.client.get(url)
        
        self.assertEqual(response.status_code, 200)
        self.assertNotContains(response, "Activo")
        self.assertContains(response, "Eliminado 1")
        self.assertContains(response, "Eliminado 2")
        
        print(f"   ‚úì Status: {response.status_code}")
        print(f"   ‚úì Medios en papelera mostrados: 2")
        print(f"   ‚úì Medios activos ocultados de papelera")
        
    def test_restaurar_medio_eliminado(self):
        """Test: Restaurar medio desde papelera"""
        print("\n‚ôªÔ∏è Probando restauraci√≥n desde papelera...")
        
        # Crear y eliminar un medio de prueba
        medio = MedioDePago.objects.create(
            nombre="Para Restaurar",
            comision_porcentaje=5.0
        )
        medio.soft_delete()
        
        print(f"   ‚Ä¢ Estado inicial del medio:")
        print(f"     - Nombre: {medio.nombre}")
        print(f"     - Eliminado: {'S√≠' if medio.deleted_at else 'No'}")
        print(f"     - Fecha eliminaci√≥n: {medio.deleted_at or 'N/A'}")
        print(f"     - Activo: {'S√≠' if medio.is_active else 'No'}")
        
        # Intentar restaurar
        try:
            url = reverse('medios_pago:restore', args=[medio.pk])
            print(f"   ‚Ä¢ URL de restauraci√≥n: {url}")
        except Exception as e:
            print(f"   ‚ùå Error al generar URL: {str(e)}")
            print("   üí° Sugerencia: Verificar 'restore' en medios_pago.urls")
        response = self.client.post(url, follow=True)
        
        medio.refresh_from_db()
        self.assertFalse(medio.is_deleted)
        self.assertIsNone(medio.deleted_at)
        
        print(f"   Estado despu√©s de restaurar: Eliminado={medio.is_deleted}")
        print("   ‚úì Medio restaurado exitosamente")


class IntegrationTest(TestCase):
    """Tests de integraci√≥n del m√≥dulo completo"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
        # Crear usuario administrador
        self.admin_user = User.objects.create_superuser(
            username='admin',
            password='admin123',
            email='admin@test.com'
        )
        
        self.client = Client()
        self.client.login(username='admin', password='admin123')
        
    def test_flujo_completo_crear_editar_eliminar(self):
        """Test: Flujo completo de crear, editar y eliminar un medio de pago"""
        print("\nüîÑ Ejecutando flujo completo del sistema...")
        
        # PASO 1: Crear medio de pago
        print("\nüìå PASO 1: Creando medio de pago...")
        
        try:
            create_url = reverse('medios_pago:crear_admin')
            print(f"   ‚Ä¢ URL de creaci√≥n: {create_url}")
        except Exception as e:
            print(f"   ‚ùå Error al generar URL de creaci√≥n: {str(e)}")
            print("   üí° Sugerencia: Verificar 'crear_admin' en medios_pago.urls")
        create_data = {
            'nombre': 'Transferencia Bancaria',
            'comision_porcentaje': '0',
            'is_active': 'on',
            'campos-TOTAL_FORMS': '3',
            'campos-INITIAL_FORMS': '0',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
            'campos-0-nombre_campo': 'Banco',
            'campos-0-tipo_dato': 'TEXTO',
            'campos-0-is_required': 'on',
            'campos-0-DELETE': '',
            'campos-1-nombre_campo': 'N√∫mero de cuenta',
            'campos-1-tipo_dato': 'NUMERO',
            'campos-1-is_required': 'on',
            'campos-1-DELETE': '',
            'campos-2-nombre_campo': 'Titular',
            'campos-2-tipo_dato': 'TEXTO',
            'campos-2-is_required': 'on',
            'campos-2-DELETE': '',
        }
        
        response = self.client.post(create_url, create_data, follow=True)
        self.assertEqual(response.status_code, 200)
        
        medio = MedioDePago.objects.get(nombre='Transferencia Bancaria')
        print(f"   ‚úì Medio creado: {medio.nombre}")
        print(f"   ‚úì Campos creados: {medio.campos.count()}")
        
        # PASO 2: Editar medio (agregar campo y cambiar comisi√≥n)
        print("\nüìå PASO 2: Editando medio de pago...")
        
        edit_url = reverse('medios_pago:editar', args=[medio.pk])
        
        campos_existentes = list(medio.campos.all())
        
        edit_data = {
            'nombre': 'Transferencia Bancaria',
            'comision_porcentaje': '0.5',  # Cambiar comisi√≥n
            'is_active': 'on',
            'campos-TOTAL_FORMS': '4',
            'campos-INITIAL_FORMS': '3',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
        }
        
        # Agregar campos existentes
        for i, campo in enumerate(campos_existentes):
            edit_data.update({
                f'campos-{i}-id': str(campo.id),
                f'campos-{i}-nombre_campo': campo.nombre_campo,
                f'campos-{i}-tipo_dato': campo.tipo_dato,
                f'campos-{i}-is_required': 'on' if campo.is_required else '',
                f'campos-{i}-DELETE': '',
            })
        
        # Agregar nuevo campo
        edit_data.update({
            'campos-3-nombre_campo': 'Swift',
            'campos-3-tipo_dato': 'TEXTO',
            'campos-3-is_required': '',
            'campos-3-DELETE': '',
        })
        
        response = self.client.post(edit_url, edit_data, follow=True)
        self.assertEqual(response.status_code, 200)
        
        medio.refresh_from_db()
        print(f"   ‚úì Comisi√≥n actualizada: {medio.comision_porcentaje}%")
        print(f"   ‚úì Campos totales: {medio.campos.filter(deleted_at__isnull=True).count()}")
        
        # PASO 3: Desactivar medio
        print("\nüìå PASO 3: Desactivando medio de pago...")
        
        toggle_url = reverse('medios_pago:toggle', args=[medio.pk])
        response = self.client.post(toggle_url, follow=True)
        
        medio.refresh_from_db()
        self.assertFalse(medio.is_active)
        print(f"   ‚úì Estado: {'Activo' if medio.is_active else 'Inactivo'}")
        
        # PASO 4: Soft delete
        print("\nüìå PASO 4: Eliminando medio (soft delete)...")
        
        delete_url = reverse('medios_pago:delete', args=[medio.pk])
        response = self.client.post(delete_url, follow=True)
        
        medio.refresh_from_db()
        self.assertTrue(medio.is_deleted)
        print(f"   ‚úì Medio eliminado (soft delete)")
        
        # PASO 5: Verificar en papelera
        print("\nüìå PASO 5: Verificando en papelera...")
        
        papelera_url = reverse('medios_pago:papelera')
        response = self.client.get(papelera_url)
        
        self.assertContains(response, 'Transferencia Bancaria')
        print(f"   ‚úì Medio visible en papelera")
        
        # PASO 6: Restaurar
        print("\nüìå PASO 6: Restaurando medio...")
        
        restore_url = reverse('medios_pago:restore', args=[medio.pk])
        response = self.client.post(restore_url, follow=True)
        
        medio.refresh_from_db()
        self.assertFalse(medio.is_deleted)
        print(f"   ‚úì Medio restaurado exitosamente")
        
        # PASO 7: Eliminaci√≥n permanente
        print("\nüìå PASO 7: Preparando eliminaci√≥n permanente...")
        
        # Primero hacer soft delete nuevamente
        medio.soft_delete()
        
        hard_delete_url = reverse('medios_pago:hard_delete', args=[medio.pk])
        response = self.client.post(hard_delete_url, follow=True)
        
        self.assertFalse(MedioDePago.objects.filter(pk=medio.pk).exists())
        print(f"   ‚úì Medio eliminado permanentemente de la BD")
        
        print("\nüéâ FLUJO COMPLETO EJECUTADO EXITOSAMENTE")
        
    def test_validacion_campos_duplicados_en_formset(self):
        """Test: Validar que no se puedan crear campos duplicados en el mismo env√≠o"""
        print("\n‚ö†Ô∏è Probando validaci√≥n de campos duplicados en formset...")
        
        create_url = reverse('medios_pago:crear_admin')
        
        # Intentar crear con campos duplicados
        data = {
            'nombre': 'Medio con Duplicados',
            'comision_porcentaje': '2.5',
            'is_active': 'on',
            'campos-TOTAL_FORMS': '2',
            'campos-INITIAL_FORMS': '0',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
            # Dos campos con el mismo nombre
            'campos-0-nombre_campo': 'Email',
            'campos-0-tipo_dato': 'EMAIL',
            'campos-0-is_required': 'on',
            'campos-0-DELETE': '',
            'campos-1-nombre_campo': 'Email',  # Duplicado
            'campos-1-tipo_dato': 'TEXTO',
            'campos-1-is_required': '',
            'campos-1-DELETE': '',
        }
        
        response = self.client.post(create_url, data)
        
        # No debe crear el medio si hay duplicados
        self.assertFalse(
            MedioDePago.objects.filter(nombre='Medio con Duplicados').exists()
        )
        
        print("   ‚úì Campos duplicados detectados y rechazados")
        print("   ‚úì Medio no creado debido a la validaci√≥n")
        
    def test_restriccion_edicion_campos_existentes(self):
        """Test: Verificar que no se pueden eliminar campos existentes en edici√≥n"""
        print("\nüîí Probando restricciones de edici√≥n...")
        print("   ‚Ä¢ Verificando protecci√≥n de campos existentes...")
        print("\nüîí Probando restricci√≥n de eliminaci√≥n de campos en edici√≥n...")
        
        # Crear medio con campos
        medio = MedioDePago.objects.create(
            nombre="Medio Protegido",
            comision_porcentaje=3.0,
            is_active=True
        )
        
        campo1 = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="Campo Protegido 1",
            tipo_dato="TEXTO",
            is_required=True
        )
        
        campo2 = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="Campo Protegido 2",
            tipo_dato="NUMERO",
            is_required=False
        )
        
        print(f"   Campos iniciales: {medio.campos.count()}")
        
        # Intentar editar y marcar campo para eliminaci√≥n
        edit_url = reverse('medios_pago:editar', args=[medio.pk])
        
        edit_data = {
            'nombre': 'Medio Protegido',
            'comision_porcentaje': '3.0',
            'is_active': 'on',
            'campos-TOTAL_FORMS': '2',
            'campos-INITIAL_FORMS': '2',
            'campos-MIN_NUM_FORMS': '0',
            'campos-MAX_NUM_FORMS': '10',
            'campos-0-id': str(campo1.id),
            'campos-0-nombre_campo': 'Campo Protegido 1',
            'campos-0-tipo_dato': 'TEXTO',
            'campos-0-is_required': 'on',
            'campos-0-DELETE': 'on',  # Intentar eliminar
            'campos-1-id': str(campo2.id),
            'campos-1-nombre_campo': 'Campo Protegido 2',
            'campos-1-tipo_dato': 'NUMERO',
            'campos-1-is_required': '',
            'campos-1-DELETE': '',
        }
        
        response = self.client.post(edit_url, edit_data, follow=True)
        
        # El campo marcado para eliminaci√≥n debe hacer soft delete
        campo1.refresh_from_db()
        self.assertTrue(campo1.is_deleted)
        
        print(f"   ‚úì Campo marcado para eliminaci√≥n: soft delete aplicado")
        print(f"   ‚úì Campo a√∫n existe en BD pero marcado como eliminado")
        
    def test_manejo_espacios_en_nombres(self):
        """Test: Verificar el manejo correcto de espacios en nombres"""
        print("\nüî§ Probando manejo de espacios en nombres...")
        
        # Crear medio con espacios extras
        medio = MedioDePago.objects.create(
            nombre="   PayPal Business   ",
            comision_porcentaje=3.5
        )
        
        # El modelo debe limpiar los espacios
        self.assertEqual(medio.nombre, "PayPal Business")
        print(f"   ‚úì Espacios eliminados: '{medio.nombre}'")
        
        # Crear campo con espacios
        campo = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="   Email del Cliente   ",
            tipo_dato="EMAIL"
        )
        
        self.assertEqual(campo.nombre_campo, "Email del Cliente")
        print(f"   ‚úì Campo limpiado: '{campo.nombre_campo}'")


class PerformanceTest(TestCase):
    """Tests de rendimiento y escalabilidad"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
    def test_manejo_multiples_medios_pago(self):
        """Test: Manejo eficiente de m√∫ltiples medios de pago"""
        print("\n‚ö° Probando rendimiento con m√∫ltiples medios...")
        
        import time
        start_time = time.time()
        
        # Crear 50 medios de pago
        medios = []
        for i in range(50):
            medio = MedioDePago.objects.create(
                nombre=f"Medio {i:03d}",
                comision_porcentaje=i % 10,
                is_active=i % 2 == 0
            )
            medios.append(medio)
        
        creation_time = time.time() - start_time
        print(f"   ‚úì 50 medios creados en {creation_time:.2f} segundos")
        
        # Crear campos para cada medio
        start_time = time.time()
        for medio in medios[:10]:  # Solo los primeros 10 para no demorar mucho
            for j in range(5):
                CampoMedioDePago.objects.create(
                    medio_de_pago=medio,
                    nombre_campo=f"Campo {j}",
                    tipo_dato='TEXTO'
                )
        
        fields_time = time.time() - start_time
        print(f"   ‚úì 50 campos creados en {fields_time:.2f} segundos")
        
        # Probar consultas
        start_time = time.time()
        
        # Consulta de medios activos
        activos = MedioDePago.active.count()
        
        # Consulta con prefetch de campos
        medios_con_campos = MedioDePago.active.prefetch_related('campos').all()
        total_campos = sum(m.campos.count() for m in medios_con_campos)
        
        query_time = time.time() - start_time
        print(f"   ‚úì Consultas ejecutadas en {query_time:.2f} segundos")
        print(f"   ‚úì Medios activos: {activos}")
        print(f"   ‚úì Total campos: {total_campos}")
        
        self.assertLess(creation_time, 5, "Creaci√≥n toma demasiado tiempo")
        self.assertLess(query_time, 1, "Consultas toman demasiado tiempo")


class EdgeCasesTest(TestCase):
    """Tests para casos extremos y situaciones especiales"""
    
    def setUp(self):
        """Configuraci√≥n inicial para cada test"""
        print("\n" + "="*80)
        print(f"Ejecutando: {self._testMethodName}")
        print("="*80)
        
    def test_nombre_medio_unicode(self):
        """Test: Manejo de caracteres Unicode en nombres"""
        print("\nüåç Probando caracteres Unicode...")
        
        medio = MedioDePago.objects.create(
            nombre="√ëand√∫ Pagos - Guaran√≠ ‚Ç¨‚Çπ¬•",
            comision_porcentaje=2.5
        )
        
        self.assertEqual(medio.nombre, "√ëand√∫ Pagos - Guaran√≠ ‚Ç¨‚Çπ¬•")
        print(f"   ‚úì Unicode manejado correctamente: {medio.nombre}")
        
    def test_comision_decimal_precision(self):
        """Test: Precisi√≥n decimal en comisiones"""
        print("\nüí∞ Probando precisi√≥n decimal...")
        
        try:
            from decimal import Decimal
            medio = MedioDePago.objects.create(
                nombre="Precision Test",
                comision_porcentaje=Decimal('2.990')
            )
            print(f"   ‚úì Medio creado con comisi√≥n: {medio.comision_porcentaje}%")
            self.assertEqual(medio.comision_porcentaje, Decimal('2.99'))
            print("   ‚úì Precisi√≥n decimal correcta")
        except ValidationError as e:
            print(f"   ‚ùå Error de validaci√≥n: {e.messages[0]}")
            print(f"   üí° Sugerencia: Verificar decimales en models.py - DecimalField")
            raise
        
        # Probar l√≠mites
        medio.comision_porcentaje = Decimal('99.99')
        medio.save()
        
        medio.refresh_from_db()
        self.assertEqual(medio.comision_porcentaje, Decimal('99.99'))
        
        print(f"   ‚úì Precisi√≥n decimal mantenida: {medio.comision_porcentaje}")
        
    def test_campo_orden_automatico(self):
        """Test: Orden autom√°tico de campos"""
        print("\nüìä Probando orden de campos...")
        
        medio = MedioDePago.objects.create(
            nombre="Orden Test",
            comision_porcentaje=1.0
        )
        
        # Crear campos sin especificar orden
        campo1 = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="Primero",
            tipo_dato="TEXTO"
        )
        
        campo2 = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="Segundo",
            tipo_dato="NUMERO"
        )
        
        campo3 = CampoMedioDePago.objects.create(
            medio_de_pago=medio,
            nombre_campo="Tercero",
            tipo_dato="FECHA"
        )
        
        # Verificar que se ordenan correctamente
        campos_ordenados = medio.campos.all()
        
        print("   Orden de campos:")
        for campo in campos_ordenados:
            print(f"     - {campo.nombre_campo} (orden: {campo.orden})")
        
        self.assertEqual(len(campos_ordenados), 3)
        
    def test_tipos_dato_validacion(self):
        """Test: Validaci√≥n de todos los tipos de dato"""
        print("\nüìù Probando todos los tipos de dato...")
        
        medio = MedioDePago.objects.create(
            nombre="Tipos Test",
            comision_porcentaje=0
        )
        
        tipos = ['TEXTO', 'NUMERO', 'FECHA', 'EMAIL', 'TELEFONO', 'URL']
        
        for tipo in tipos:
            campo = CampoMedioDePago.objects.create(
                medio_de_pago=medio,
                nombre_campo=f"Campo {tipo}",
                tipo_dato=tipo,
                is_required=False
            )
            
            self.assertEqual(campo.tipo_dato, tipo)
            print(f"   ‚úì Tipo {tipo}: {campo.get_tipo_dato_display()}")
        
        self.assertEqual(medio.campos.count(), len(tipos))
        
    def test_cascada_eliminacion(self):
        """Test: Verificar eliminaci√≥n en cascada de campos"""
        print("\nüîó Probando eliminaci√≥n en cascada...")
        
        medio = MedioDePago.objects.create(
            nombre="Cascada Test",
            comision_porcentaje=5.0
        )
        
        # Crear varios campos
        for i in range(3):
            CampoMedioDePago.objects.create(
                medio_de_pago=medio,
                nombre_campo=f"Campo {i}",
                tipo_dato="TEXTO"
            )
        
        print(f"   Campos creados: {medio.campos.count()}")
        
        # Eliminar el medio (hard delete)
        medio_id = medio.id
        medio.delete()
        
        # Verificar que los campos tambi√©n se eliminaron
        campos_restantes = CampoMedioDePago.objects.filter(
            medio_de_pago_id=medio_id
        ).count()
        
        self.assertEqual(campos_restantes, 0)
        print(f"   ‚úì Campos eliminados en cascada: 0 restantes")


# Ejecutor de tests con reporte detallado
def run_all_tests():
    """Funci√≥n helper para ejecutar todos los tests con reporte detallado"""
    import unittest
    
    print("\n" + "="*80)
    print("INICIANDO SUITE DE TESTS - M√ìDULO MEDIOS DE PAGO")
    print("="*80)
    
    # Crear suite de tests
    loader = unittest.TestLoader()
    suite = unittest.TestSuite()
    
    # Agregar todos los test cases
    test_cases = [
        MedioDePagoModelTest,
        CampoMedioDePagoModelTest,
        MedioDePagoFormsTest,
        MedioDePagoViewsTest,
        IntegrationTest,
        PerformanceTest,
        EdgeCasesTest
    ]
    
    for test_case in test_cases:
        suite.addTests(loader.loadTestsFromTestCase(test_case))
    
    # Ejecutar tests
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(suite)
    
    # Reporte final
    print("\n" + "="*80)
    print("REPORTE FINAL DE TESTS")
    print("="*80)
    print(f"Tests ejecutados: {result.testsRun}")
    print(f"‚úÖ Exitosos: {result.testsRun - len(result.failures) - len(result.errors)}")
    print(f"‚ùå Fallos: {len(result.failures)}")
    print(f"üí• Errores: {len(result.errors)}")
    
    if result.wasSuccessful():
        print("\nüéâ ¬°TODOS LOS TESTS PASARON EXITOSAMENTE! üéâ")
    else:
        print("\n‚ö†Ô∏è Algunos tests fallaron. Revisa los detalles arriba.")
    
    return result