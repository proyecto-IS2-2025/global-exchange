services:
  web:
    container_name: glx-web-prod
    build:
      context: .
      dockerfile: Dockerfile.prod
    command: /app/scripts/prod-entrypoint.sh
    volumes:
      - static_volume:/app/staticfiles
      # Si manejas archivos de media, descomenta la siguiente línea
      # - media_volume:/app/mediafiles
    # Las variables de entorno ahora se definen aquí manualmente
    environment:
      - SECRET_KEY=clave_secreta_segura
      - DEBUG=False
      - ALLOWED_HOSTS=localhost,127.0.0.1
      - DB_HOST=db
      - DB_NAME=glex-prod
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_PORT=5432
    depends_on:
      db:
        condition: service_healthy

  nginx:
    container_name: glx-nginx
    image: nginx:1.25.3-alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/app/staticfiles
      # Si manejas archivos de media, descomenta la siguiente línea
      # - media_volume:/app/mediafiles
    depends_on:
      - web

  db:
    container_name: glx-db-prod
    image: postgres:17
    restart: always
    # Las variables de entorno se definen aquí, en vez de usar un archivo
    environment:
      - POSTGRES_DB=glex-prod
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    user: postgres
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data/
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  postgres_data_prod:
  static_volume:
  # Si manejas archivos de media, descomenta la siguiente línea
  # media_volume: